import{i as h,l as m}from"./chunk-KIEPZ5TW.js";import{Ga as c,La as l,Wa as d,Xa as n,Ya as t,jb as i,kb as o,ua as s}from"./chunk-DXOJW474.js";function p(a,r){if(a&1&&(n(0,"div")(1,"details")(2,"summary"),i(3),t(),n(4,"p"),i(5),t()()()),a&2){let e=r.$implicit;s(3),o(e.q),s(2),o(e.a)}}var u=class a{qaData=[{q:"What is C#?",a:"C# is a modern, object-oriented programming language developed by Microsoft for the .NET platform."},{q:"What are the main features of C#?",a:"Object-Oriented, Type-Safe, Automatic Garbage Collection, LINQ, Async/Await, Cross-Platform with .NET Core."},{q:"What is CLR?",a:"CLR (Common Language Runtime) is the execution engine for .NET applications. It handles memory management, security, and exception handling."},{q:"What is the difference between .NET Framework, .NET Core, and .NET 5+?",a:".NET Framework works only on Windows. .NET Core is cross-platform and modular. .NET 5+ unifies all platforms into a single framework."},{q:"What is an Assembly?",a:"An assembly is a compiled code library used for deployment, versioning, and security in .NET. It can be an EXE or DLL."},{q:"What is the difference between value types and reference types in C#?",a:"Value types (int, struct) store data directly. Reference types (class, object, string) store references to memory on the heap."},{q:"What is the difference between const and readonly in C#?",a:"const is compile-time constant. readonly is runtime constant that can be assigned in constructor."},{q:"What is the difference between ref and out parameters?",a:"ref requires initialization before passing; out must be assigned inside the method."},{q:"What is boxing and unboxing?",a:"Boxing converts a value type into an object. Unboxing extracts the value type from the object."},{q:"What are delegates?",a:"Delegates are type-safe references to methods, used for callbacks and event handling."},{q:"What are events?",a:"Events are a messaging system built on delegates, implementing publisher-subscriber model."},{q:"What is the difference between interface and abstract class?",a:"Interfaces define contracts only. Abstract classes can contain implementation and state."},{q:"What is the difference between == and Equals()?",a:"== checks reference equality (by default). Equals() can be overridden to check object content."},{q:"Is C# a statically typed or dynamically typed language?",a:"C# is primarily a statically typed language, meaning the type of a variable is checked at compile-time. However, since C# 4.0, it also supports dynamic typing using the dynamic keyword, where type checking happens at runtime."},{q:"What is the dynamic keyword in C#?",a:'The dynamic keyword tells the compiler to defer type checking until runtime. It is useful for working with COM objects, reflection, or dynamic languages like Python. Example: dynamic obj = "Hello"; obj = 10; // allowed.'},{q:"What is the difference between var and dynamic in C#?",a:"var is strongly typed and resolved at compile-time, so the type cannot change after initialization. dynamic is resolved at runtime and can change types during execution."},{q:"What is String in C#?",a:"In C#, String is an object of System.String class that represents a sequence of characters. Strings are immutable in C#."},{q:"Why are Strings immutable in C#?",a:"Strings are immutable for performance and security reasons. When you modify a string, a new object is created in memory."},{q:"Difference between String and StringBuilder in C#?",a:"String is immutable, while StringBuilder is mutable and more efficient for frequent modifications like append or insert."},{q:"What is String Interning in C#?",a:"String interning is a process where only one copy of each unique literal string is stored in the memory (intern pool) to save memory."},{q:"How do you compare two Strings in C#?",a:"You can use == operator, Equals(), or String.Compare() to compare two strings. == checks content in C#, not reference."},{q:"What are common String methods in C#?",a:"Length, Substring, IndexOf, ToUpper, ToLower, Trim, Replace, Split, Contains, StartsWith, EndsWith."},{q:"What is the difference between == and Equals() for Strings in C#?",a:"Both check content equality in C#. However, Equals() can be overridden for more specific comparison."},{q:"Can we use Strings in switch-case in C#?",a:"Yes, from C# 7 onwards, Strings can be used in switch statements."},{q:"What is the use of ToCharArray() in C#?",a:"It converts a string into a character array."},{q:"How to reverse a String in C#?",a:"You can use LINQ: new string(str.Reverse().ToArray()) or use Array.Reverse() on a char array."},{q:"What is an Array in C#?",a:"An Array in C# is a collection of elements of the same type stored in contiguous memory locations. Arrays are fixed in size."},{q:"How do you declare and initialize an Array in C#?",a:"int[] arr = new int[5]; or int[] arr = {1, 2, 3, 4, 5};"},{q:"What is the default value of array elements in C#?",a:"Numeric types default to 0, bool to false, reference types (like string) to null."},{q:"What are the types of Arrays in C#?",a:"Single-Dimensional Array, Multi-Dimensional Array (rectangular), and Jagged Array (array of arrays)."},{q:"What is the difference between rectangular and jagged arrays?",a:"Rectangular arrays are multidimensional with equal size in each row (e.g., int[2,3]). Jagged arrays are arrays of arrays where each row can have different sizes (e.g., int[][])."},{q:"How to find the length of an Array in C#?",a:"Use the Length property, e.g., arr.Length."},{q:"How to sort an Array in C#?",a:"Use Array.Sort(arr) for ascending order. For descending, use Array.Reverse() after sorting."},{q:"What is Array.Copy() in C#?",a:"Array.Copy() is used to copy elements from one array to another."},{q:"How do you loop through an Array in C#?",a:"You can use for, foreach, or while loops."},{q:"What namespace contains Array class in C#?",a:"System namespace contains the Array class."},{q:"What are the four main principles of OOP?",a:"Encapsulation, Abstraction, Inheritance, and Polymorphism."},{q:"What is Encapsulation in C#?",a:"Encapsulation is binding data and methods together into a single unit (class). It is implemented using access modifiers and properties (getters and setters)."},{q:"What is Abstraction in C#?",a:"Abstraction is hiding implementation details and exposing only the essential features. Achieved using abstract classes and interfaces."},{q:"What is Inheritance in C#?",a:"Inheritance allows one class to acquire the properties and methods of another. Implemented using the : symbol. Example: class Child : Parent."},{q:"What is Polymorphism in C#?",a:"Polymorphism means the same method can behave differently. It can be compile-time (method overloading) or runtime (method overriding using virtual and override keywords)."},{q:"What is a Class in C#?",a:"A class is a blueprint that defines fields, properties, methods, and events."},{q:"What is an Object in C#?",a:"An object is an instance of a class created using the new keyword."},{q:"What is a Constructor in C#?",a:"A constructor is a special method that initializes objects. It has the same name as the class and no return type."},{q:"What are the types of Constructors in C#?",a:"Default constructor, parameterized constructor, static constructor, and copy constructor (manually written)."},{q:"What is the difference between method overloading and overriding in C#?",a:"Overloading: same method name but different parameter list (compile-time). Overriding: child class provides new implementation for base class method using override keyword (runtime)."},{q:"What is the difference between this and base in C#?",a:"this refers to the current instance of the class, while base refers to the parent class members."},{q:"Can constructors be overloaded and overridden in C#?",a:"Constructors can be overloaded but cannot be overridden."},{q:"What is an abstract class in C#?",a:"An abstract class cannot be instantiated and may contain abstract (unimplemented) methods and concrete methods. It is defined using the abstract keyword."},{q:"What is an interface in C#?",a:"An interface defines a contract with methods, properties, and events but no implementation. A class or struct must implement all members of an interface."},{q:"Difference between abstract class and interface in C#?",a:"Abstract class can have fields and implemented methods, while an interface cannot have fields and (before C# 8) only had method signatures. Interfaces support multiple inheritance."},{q:"What are access modifiers in C#?",a:"public, private, protected, internal, and protected internal. They control accessibility of members inside and outside the class."},{q:"How is encapsulation implemented in C#?",a:"By declaring fields as private and providing public properties with get and set accessors."},{q:"What is the difference between const, readonly, and static in C#?",a:"const is a compile-time constant, readonly is a runtime constant (assigned in constructor), and static means the member belongs to the class, not an instance."},{q:"What is a sealed class in C#?",a:"A sealed class cannot be inherited. Similar to final classes in Java."},{q:"What is the difference between static constructor and instance constructor in C#?",a:"Static constructor is called only once before the first object is created, while instance constructor is called every time a new object is created."},{q:"What is the difference between abstraction and encapsulation in C#?",a:"Abstraction hides implementation details and shows only the essential features (achieved using abstract classes and interfaces). Encapsulation hides the internal state of an object and allows controlled access using access modifiers and properties."},{q:"Can an abstract class have a constructor in C#?",a:"Yes, abstract classes can have constructors. These constructors are called when an object of a derived class is created."},{q:"Can an interface have default implementations in C#?",a:"Before C# 8, interfaces could only contain method signatures. From C# 8 onward, interfaces can include default implementations using the default keyword."},{q:"Can a class inherit multiple interfaces in C#?",a:"Yes, C# supports multiple interface inheritance. A class can implement multiple interfaces by separating them with commas."},{q:"What is the difference between abstract class and interface in modern C#?",a:"Abstract class can contain fields, constructors, and implemented methods. Interface (from C# 8) can contain default implementations but still cannot have instance fields. Interfaces are preferred for contracts, abstract classes for shared base functionality."},{q:"What is a static class in C#?",a:"A static class cannot be instantiated or inherited. It can only contain static members and is used for utility/helper methods. Example: Math class."},{q:"What are static members in C#?",a:"Static members belong to the class rather than any instance. They are shared across all objects of the class."},{q:"What is a static constructor in C#?",a:"A static constructor is used to initialize static members of the class. It is called automatically before the first object is created or any static member is accessed."},{q:"What is the difference between static and instance members in C#?",a:"Static members are shared across all instances and belong to the class, while instance members are unique for each object."},{q:"Can we use this keyword in a static method?",a:"No, because this refers to the current object instance, and static methods belong to the class, not an instance."},{q:"What is the difference between const, readonly, and static readonly in C#?",a:"const is compile-time constant, readonly is runtime constant (assigned in constructor), and static readonly is a runtime constant shared across all instances."},{q:"What is garbage collection?",a:"Automatic memory management that frees unused objects in .NET."},{q:"What is dependency injection in C#?",a:"A design pattern where dependencies are provided externally, improving flexibility and testability."},{q:"What is difference between var, dynamic, and object?",a:"var is compile-time typed, dynamic is runtime typed, object is the base type requiring casting."},{q:"What is a namespace?",a:"Namespaces organize classes and avoid naming conflicts."},{q:"What are collections in C#?",a:"Collections are classes for storing groups of objects like List, Dictionary, Queue, Stack."},{q:"What is difference between Array and ArrayList?",a:"Array has fixed size and stores same type. ArrayList (or List<T>) is dynamic and stores objects of any type."},{q:"What is Dictionary in C#?",a:"Dictionary<TKey,TValue> is a collection of key-value pairs with fast lookup."},{q:"What is difference between List and HashSet?",a:"List allows duplicates and maintains order. HashSet does not allow duplicates and is unordered."},{q:"What is thread in C#?",a:"Thread is a lightweight process for concurrent execution of tasks."},{q:"What is multithreading?",a:"Multithreading allows multiple parts of a program to run concurrently."},{q:"What is thread synchronization?",a:"Synchronization ensures that multiple threads safely access shared resources."},{q:"What is deadlock?",a:"Deadlock occurs when two or more threads wait indefinitely for resources locked by each other."},{q:"What is async vs multithreading?",a:"Async is about non-blocking operations, multithreading is about parallel execution."},{q:"What is reflection in C#?",a:"Reflection is the ability to inspect and modify metadata and behavior of assemblies at runtime."},{q:"What are generics?",a:"Generics allow type-safe data structures and methods without boxing/unboxing."},{q:"What are attributes in C#?",a:"Attributes add metadata to code elements like classes, methods, and properties."},{q:"What are access modifiers in C#?",a:"public, private, protected, internal, and protected internal define accessibility of members."},{q:"What is difference between public, private, and protected?",a:"public = accessible everywhere, private = only in same class, protected = accessible in derived classes."},{q:"What is MVC in ASP.NET?",a:"MVC (Model-View-Controller) is a pattern for building web apps separating concerns."},{q:"What is Entity Framework?",a:"EF is an ORM for .NET to interact with databases using LINQ instead of SQL."},{q:"What is .NET Core middleware?",a:"Middleware are components that handle requests/responses in ASP.NET Core pipeline."},{q:"What is LinkedList in C#?",a:"LinkedList<T> is a doubly linked list collection that allows fast insertions and deletions at any position but slower random access compared to List<T>."},{q:"What is Stack in C#?",a:"Stack<T> is a collection that follows LIFO (Last In, First Out). You can push items onto the stack and pop them in reverse order."},{q:"What is Queue in C#?",a:"Queue<T> is a collection that follows FIFO (First In, First Out). Elements are added at the end and removed from the front."},{q:"What is SortedSet in C#?",a:"SortedSet<T> is a collection of unique elements that maintains elements in sorted order automatically."},{q:"What is the difference between this and base in C#?",a:'this refers to the current instance of a class. base is used to access members of the base class from a derived class. (In Java, "super" plays this role).'},{q:"What is the difference between instance constructor and static constructor in C#?",a:"Instance constructors (non-static) run when an object is created. Static constructors run only once per type, before any object is created or static member is accessed."},{q:"What are static blocks in C#?",a:"C# does not have explicit static blocks like Java. Instead, static constructors serve the same purpose for initializing static data."},{q:"What are instance initializers in C#?",a:"C# supports instance field initializers (e.g., int x = 5;) and object initializers, but it does not have explicit instance initializer blocks like Java."},{q:"Difference between const, readonly, and static in C#?",a:"const is a compile-time constant (must be assigned at declaration). readonly can only be assigned at declaration or in a constructor (runtime constant). static means the member belongs to the class rather than an instance. static readonly is often used for constants that are known only at runtime."},{q:"What is the finally block in C#?",a:"finally is used in exception handling. It always executes after try-catch, whether an exception occurs or not. Commonly used to release resources like closing files or database connections."},{q:"What is the throw keyword in C#?",a:'throw is used to explicitly raise an exception in C#. Example: throw new Exception("Error occurred").'},{q:"Does C# have a throws keyword like Java?",a:"No, C# does not have a throws keyword. Unlike Java, C# methods do not declare the exceptions they might throw. Any exception can be thrown at runtime."},{q:"What is exception handling in C#?",a:"Exception handling is a mechanism to handle runtime errors using try, catch, finally, and throw. It prevents program crashes and provides a graceful way to deal with errors."},{q:"What is the difference between exceptions and errors?",a:"In C#, exceptions are objects derived from System.Exception. Errors are critical issues (like OutOfMemoryException) that cannot always be handled safely."},{q:"What are common exception classes in C#?",a:"Some common ones are NullReferenceException, IndexOutOfRangeException, InvalidOperationException, ArgumentException, and DivideByZeroException."},{q:"What is the difference between throw and throw ex in C#?",a:"throw preserves the original stack trace, while throw ex resets the stack trace. It is recommended to use throw to rethrow exceptions."},{q:"What is the use of finally block in C#?",a:"finally always executes after try/catch, regardless of whether an exception occurs. It is mainly used for cleanup code like closing files, releasing memory, or closing database connections."},{q:"What is the difference between checked and unchecked in C#?",a:"checked enforces overflow checking for arithmetic operations, throwing an OverflowException if overflow occurs. unchecked ignores overflow checks and wraps values silently."},{q:"What is custom exception in C#?",a:"A custom exception is a user-defined exception class derived from System.Exception. It is used when built-in exceptions don\u2019t describe the error properly."},{q:"Can multiple catch blocks be used in C#?",a:"Yes. Multiple catch blocks can be used to handle different types of exceptions. They should be ordered from most specific to most general."},{q:"What is the base class for all exceptions in C#?",a:"System.Exception is the base class for all exceptions in C#."},{q:"What is an Enumerator in C#?",a:"Enumerator is an object that implements IEnumerator interface. It provides iteration over a collection with Current, MoveNext(), and Reset() methods."},{q:"What is the difference between IEnumerable and IEnumerator in C#?",a:"IEnumerable provides an enumerator using GetEnumerator() method. IEnumerator is the actual enumerator object that iterates over the collection."},{q:"What is the difference between foreach and IEnumerator?",a:"foreach is syntactic sugar that internally uses IEnumerator. IEnumerator requires manual calls to MoveNext() and Current, while foreach is easier to use."},{q:"What is IComparable in C#?",a:"IComparable is an interface that defines a CompareTo() method. It is used to define a natural ordering for objects. Example: sorting a list of integers or strings."},{q:"What is IComparer in C#?",a:"IComparer is an interface that defines a Compare(x, y) method. It is used when you want to define custom comparison logic outside the object."},{q:"Difference between IComparable and IComparer in C#?",a:"IComparable is implemented in the class itself to provide natural sorting (e.g., alphabetical for strings). IComparer is implemented externally for custom sorting (e.g., sort employees by salary)."},{q:"When to use IComparable vs IComparer in C#?",a:"Use IComparable when a class has a single natural ordering. Use IComparer when you need multiple ways to compare objects (e.g., sort by name or by age)."}];static \u0275fac=function(e){return new(e||a)};static \u0275cmp=c({type:a,selectors:[["app-lang-csharp"]],decls:6,vars:1,consts:[[1,"qa-container"],[1,"subtitle"],[4,"ngFor","ngForOf"]],template:function(e,f){e&1&&(n(0,"div",0)(1,"h2"),i(2,"C# Interview Q&A"),t(),n(3,"h3",1),i(4,"Freshers\u2019 Easy Guide \u2014 Crack Interviews from Basics \u279D Advanced"),t(),l(5,p,6,2,"div",2),t()),e&2&&(s(5),d("ngForOf",f.qaData))},dependencies:[m,h],styles:['.qa-container[_ngcontent-%COMP%]{max-width:600px;margin:auto;background:#fff;border-radius:12px;box-shadow:0 4px 12px #0000001a;padding:20px;font-family:Arial,sans-serif}.qa-container[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{text-align:center;margin-bottom:20px;color:#1a73e8}details[_ngcontent-%COMP%]{border:1px solid #ddd;border-radius:8px;padding:12px 16px;margin-bottom:12px;background:#fafafa;transition:all .3s ease-in-out}details[_ngcontent-%COMP%]:hover{background:#f0f6ff;border-color:#1a73e8}summary[_ngcontent-%COMP%]{font-weight:600;cursor:pointer;position:relative}summary[_ngcontent-%COMP%]:after{content:"+";position:absolute;right:0;font-size:18px;transition:transform .3s ease}details[open][_ngcontent-%COMP%]   summary[_ngcontent-%COMP%]:after{content:"-";transform:rotate(180deg)}details[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin-top:10px;color:#333;line-height:1.5}.subtitle[_ngcontent-%COMP%]{text-align:center;font-size:1rem;font-weight:500;color:#555;margin-bottom:20px}']})};export{u as a};
