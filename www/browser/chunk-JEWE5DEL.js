import{a as N}from"./chunk-BX2TO4GE.js";import{a as F}from"./chunk-7VEZVHTL.js";import{a as U}from"./chunk-3UPBBD52.js";import{a as j}from"./chunk-Y2BQGCAS.js";import{a as E,b as D,c as _,d as W,e as x,f as B,g as O,j as z}from"./chunk-BH6BQIXE.js";import{a as H}from"./chunk-5JD5D54J.js";import{a as R}from"./chunk-GPBOS2NY.js";import{i as L,l as Q}from"./chunk-KIEPZ5TW.js";import{Ga as M,La as P,Wa as y,Xa as c,Ya as r,c as h,eb as v,hb as T,jb as d,kb as C,nb as u,ob as m,pb as f,ua as l}from"./chunk-DXOJW474.js";function ee(b,t){if(b&1&&(c(0,"div",19)(1,"div",20),d(2),r()()),b&2){let i=t.$implicit;T("user",i.role==="user")("assistant",i.role==="assistant"),l(2),C(i.content)}}var $=class b{messages=[{role:"assistant",content:"Hi! I can conduct mock interviews or answer your questions. Type a question or click \u201CAsk me a question\u201D."}];userInput="";isLoading=!1;isInterview=!1;awaitingAnswer=!1;questionNumber=0;maxQuestions=10;topic="java";selectedTopics={java:!0,python:!0,csharp:!0,angular:!0,spring:!0,springboot:!0};shuffleQuestions=!0;transcript=[];isListening=!1;recognition;ttsEnabled=!0;lastAskedQuestion=null;lastAskedItem=null;questionIndex=0;questionPool=[];autoMic=!1;stopRequested=!1;processingAnswer=!1;aiQuestionBank=[{q:"Explain the different approaches to implement Singleton pattern in Java",a:"Multiple approaches: 1) Eager initialization - create instance at class loading, 2) Lazy initialization - create instance when needed, 3) Thread-safe lazy initialization with synchronized method, 4) Double-checked locking, 5) Enum singleton, 6) Bill Pugh solution using static inner class",topic:"java",difficulty:"Advanced",category:"Design",keywords:["singleton","design pattern","thread safety","lazy loading"],logicApproaches:["Eager Loading","Lazy Loading","Thread-Safe Implementation","Double-Checked Locking","Enum Approach"],followUpQuestions:["Which approach would you choose for a web application?","How does enum singleton prevent reflection attacks?"]},{q:"How would you design a custom HashMap implementation? Explain different collision resolution techniques",a:"Design involves: 1) Array of buckets, 2) Hash function to map keys to indices, 3) Collision resolution using chaining (LinkedList/TreeNode) or open addressing (linear/quadratic probing), 4) Dynamic resizing when load factor exceeds threshold, 5) Optimizations like red-black tree for long chains",topic:"java",difficulty:"Advanced",category:"Problem-Solving",keywords:["hashmap","data structure","collision resolution","hashing"],logicApproaches:["Separate Chaining","Open Addressing","Robin Hood Hashing","Cuckoo Hashing"],followUpQuestions:["What happens when two keys have the same hash?","When would you use TreeMap instead?"]},{q:"Implement a thread-safe counter without using synchronized keyword",a:"Multiple approaches: 1) AtomicInteger for simple increment operations, 2) Volatile with compare-and-swap, 3) Lock-free algorithms using AtomicReference, 4) ReentrantLock for complex operations, 5) Thread-local counters with periodic aggregation",topic:"java",difficulty:"Advanced",category:"Coding",keywords:["thread safety","atomic operations","concurrency","lock-free"],logicApproaches:["Atomic Operations","Compare-and-Swap","Lock-Free Algorithms","Thread-Local Storage"],followUpQuestions:["What are the performance implications?","When would you choose locks over atomic operations?"]},{q:"Explain different garbage collection algorithms and when to use each",a:"Types: 1) Serial GC - single-threaded, good for small applications, 2) Parallel GC - multi-threaded, good for throughput, 3) CMS - concurrent mark sweep, low latency, 4) G1 - low latency with predictable pause times, 5) ZGC/Shenandoah - ultra-low latency for large heaps",topic:"java",difficulty:"Advanced",category:"Technical",keywords:["garbage collection","memory management","performance tuning"],logicApproaches:["Mark and Sweep","Generational Collection","Concurrent Collection","Incremental Collection"],followUpQuestions:["How do you tune GC for a high-traffic application?","What causes memory leaks in Java?"]},{q:"Design a producer-consumer system with multiple approaches",a:"Approaches: 1) BlockingQueue (LinkedBlockingQueue, ArrayBlockingQueue), 2) Wait-notify mechanism with synchronized blocks, 3) Semaphores for controlling access, 4) Disruptor pattern for ultra-high performance, 5) Reactive streams with backpressure",topic:"java",difficulty:"Intermediate",category:"Design",keywords:["producer consumer","concurrency","blocking queue","synchronization"],logicApproaches:["Blocking Queue Pattern","Wait-Notify Pattern","Semaphore Pattern","Lock-Free Ring Buffer"],followUpQuestions:["How do you handle backpressure?","What if consumers are slower than producers?"]},{q:"Explain different approaches to implement decorators in Python",a:"Approaches: 1) Function decorators using closures, 2) Class-based decorators with __call__, 3) Decorators with parameters using nested functions, 4) Property decorators for getters/setters, 5) Method decorators like @staticmethod, @classmethod",topic:"python",difficulty:"Intermediate",category:"Technical",keywords:["decorators","closures","metaprogramming","functional programming"],logicApproaches:["Closure-based","Class-based","Parametric Decorators","Descriptor Protocol"],followUpQuestions:["How do decorators affect function metadata?","Can you chain multiple decorators?"]},{q:"How would you implement a memory-efficient data pipeline for processing large datasets?",a:"Strategies: 1) Generators for lazy evaluation, 2) Chunking with pandas or itertools, 3) Memory mapping with mmap, 4) Streaming with iterators, 5) Parallel processing with multiprocessing/concurrent.futures, 6) Using Dask for out-of-core computation",topic:"python",difficulty:"Advanced",category:"Problem-Solving",keywords:["memory efficiency","data pipeline","generators","streaming"],logicApproaches:["Lazy Evaluation","Chunked Processing","Memory Mapping","Parallel Processing"],followUpQuestions:["When would you use Dask vs pandas?","How do you handle memory constraints?"]},{q:"Implement different caching strategies in Python",a:"Strategies: 1) LRU Cache using functools.lru_cache or OrderedDict, 2) TTL cache with time-based expiration, 3) Memory-conscious cache with weak references, 4) Distributed caching with Redis, 5) Memoization for recursive functions",topic:"python",difficulty:"Intermediate",category:"Design",keywords:["caching","memoization","performance optimization","memory management"],logicApproaches:["LRU Eviction","Time-based Expiration","Size-based Eviction","Write-through/Write-back"],followUpQuestions:["What are cache invalidation strategies?","How do you handle cache consistency?"]},{q:"Explain different change detection strategies in Angular and their performance implications",a:"Strategies: 1) Default - checks all components on every change detection cycle, 2) OnPush - only checks when inputs change or events occur, 3) Detach - manually control change detection, 4) Async pipe optimization, 5) TrackBy functions for ngFor optimization",topic:"angular",difficulty:"Advanced",category:"Technical",keywords:["change detection","performance","OnPush","optimization"],logicApproaches:["Zone-based Detection","OnPush Strategy","Manual Control","Immutable Objects"],followUpQuestions:["When would you use OnPush strategy?","How does Zone.js work internally?"]},{q:"Design a reactive form with complex validation using different approaches",a:"Approaches: 1) Built-in validators (required, email, pattern), 2) Custom synchronous validators, 3) Async validators for server-side validation, 4) Cross-field validation, 5) Dynamic form creation with FormArray, 6) Conditional validation based on other fields",topic:"angular",difficulty:"Intermediate",category:"Coding",keywords:["reactive forms","validation","form controls","custom validators"],logicApproaches:["Synchronous Validation","Asynchronous Validation","Cross-field Validation","Conditional Validation"],followUpQuestions:["How do you handle validation errors?","What is the difference between template-driven and reactive forms?"]},{q:"Design a database schema for an e-commerce system with different normalization approaches",a:"Approaches: 1) Highly normalized (3NF) for data integrity, 2) Denormalized for read performance, 3) Hybrid approach with materialized views, 4) Document-based design for NoSQL, 5) Event sourcing for audit trails, 6) CQRS for separate read/write models",topic:"database",difficulty:"Advanced",category:"Design",keywords:["database design","normalization","e-commerce","schema design"],logicApproaches:["Normalized Design","Denormalized Design","Document-oriented","Event Sourcing"],followUpQuestions:["How do you handle inventory management?","What indexing strategies would you use?"]},{q:"Implement rate limiting with different algorithms",a:"Algorithms: 1) Token bucket - allows bursts, smooth over time, 2) Leaky bucket - enforces constant rate, 3) Fixed window counter - simple but has edge cases, 4) Sliding window - more accurate but complex, 5) Sliding window counter - compromise between accuracy and efficiency",topic:"system-design",difficulty:"Advanced",category:"Problem-Solving",keywords:["rate limiting","algorithms","scalability","distributed systems"],logicApproaches:["Token Bucket","Leaky Bucket","Fixed Window","Sliding Window"],followUpQuestions:["How do you implement distributed rate limiting?","What happens during traffic spikes?"]},{q:"Find the longest substring without repeating characters using different approaches",a:"Approaches: 1) Brute force O(n\xB3) - check all substrings, 2) Sliding window O(n) with HashSet, 3) Optimized sliding window with HashMap storing indices, 4) Array-based approach for ASCII characters, 5) Two-pointer technique",topic:"algorithms",difficulty:"Intermediate",category:"Coding",keywords:["sliding window","substring","hash map","two pointers"],logicApproaches:["Brute Force","Sliding Window","Hash Map Optimization","Two Pointers"],followUpQuestions:["What is the space complexity of each approach?","How would you handle Unicode characters?"]},{q:"Implement a load balancer with different distribution algorithms",a:"Algorithms: 1) Round Robin - simple, equal distribution, 2) Weighted Round Robin - different server capacities, 3) Least Connections - route to server with fewest active connections, 4) Hash-based - consistent routing for session affinity, 5) Health check integration",topic:"system-design",difficulty:"Advanced",category:"Design",keywords:["load balancer","distribution algorithms","scalability","high availability"],logicApproaches:["Round Robin","Weighted Distribution","Least Connections","Hash-based Routing"],followUpQuestions:["How do you handle server failures?","What is session affinity?"]},{q:"Explain different approaches to handle state management in large applications",a:"Approaches: 1) Redux/NgRx - centralized store with actions/reducers, 2) Service-based state with observables, 3) Local component state with lifting up, 4) Context API for React, 5) Akita for Angular, 6) MobX for reactive state",topic:"frontend",difficulty:"Advanced",category:"Design",keywords:["state management","redux","observables","architecture"],logicApproaches:["Centralized Store","Service-based","Component State","Reactive Programming"],followUpQuestions:["When would you choose Redux over services?","How do you handle async state updates?"]},{q:"Design a caching layer for a microservices architecture",a:"Strategies: 1) Application-level caching (in-memory), 2) Database query result caching, 3) Distributed caching with Redis/Hazelcast, 4) CDN for static content, 5) HTTP caching with proper headers, 6) Multi-level caching hierarchy",topic:"microservices",difficulty:"Advanced",category:"Design",keywords:["caching","microservices","distributed systems","performance"],logicApproaches:["Multi-level Caching","Distributed Caching","Cache-aside Pattern","Write-through Pattern"],followUpQuestions:["How do you handle cache invalidation across services?","What are cache stampede problems?"]},{q:"Implement authentication and authorization with different strategies",a:"Strategies: 1) JWT tokens - stateless, scalable, 2) Session-based - server-side storage, 3) OAuth 2.0 - third-party authentication, 4) Multi-factor authentication, 5) Role-based access control (RBAC), 6) Attribute-based access control (ABAC)",topic:"security",difficulty:"Advanced",category:"Design",keywords:["authentication","authorization","JWT","OAuth","security"],logicApproaches:["Token-based","Session-based","Certificate-based","Biometric-based"],followUpQuestions:["How do you handle token refresh?","What are the security implications of each approach?"]},{q:"Design a real-time notification system with different delivery mechanisms",a:"Mechanisms: 1) WebSockets for bidirectional real-time communication, 2) Server-Sent Events (SSE) for one-way streaming, 3) Push notifications for mobile/browser, 4) Email notifications with queuing, 5) SMS via third-party services, 6) In-app notifications with persistence",topic:"system-design",difficulty:"Advanced",category:"Design",keywords:["real-time","notifications","websockets","push notifications"],logicApproaches:["Real-time Push","Polling-based","Event-driven","Queue-based"],followUpQuestions:["How do you handle offline users?","What about notification preferences?"]},{q:"Optimize database queries using different indexing and query strategies",a:"Strategies: 1) B-tree indexes for range queries, 2) Hash indexes for equality lookups, 3) Composite indexes for multi-column queries, 4) Partial indexes for filtered data, 5) Query rewriting and optimization, 6) Materialized views for complex aggregations",topic:"database",difficulty:"Advanced",category:"Technical",keywords:["database optimization","indexing","query performance","SQL tuning"],logicApproaches:["Index Optimization","Query Rewriting","Partitioning","Denormalization"],followUpQuestions:["How do you identify slow queries?","What are the trade-offs of indexing?"]},{q:"Implement different sorting algorithms and compare their approaches",a:"Approaches: 1) Bubble Sort - O(n\xB2) simple comparison swapping, 2) Quick Sort - O(n log n) divide-and-conquer with pivot, 3) Merge Sort - O(n log n) stable divide-and-conquer, 4) Heap Sort - O(n log n) using heap data structure, 5) Radix Sort - O(d\xD7n) for integers",topic:"algorithms",difficulty:"Intermediate",category:"Problem-Solving",keywords:["sorting","algorithms","time complexity","comparison"],logicApproaches:["Comparison-based","Divide-and-Conquer","Distribution-based","Heap-based"],followUpQuestions:["When would you use each algorithm?","What about external sorting for large datasets?"]},{q:"Design different approaches for finding duplicate elements in an array",a:"Approaches: 1) Nested loops O(n\xB2) - brute force comparison, 2) Sorting first O(n log n) - adjacent comparison, 3) Hash Set O(n) - track seen elements, 4) Bit manipulation for limited range, 5) Floyd's cycle detection for specific cases",topic:"algorithms",difficulty:"Basic",category:"Problem-Solving",keywords:["duplicates","array","hash set","optimization"],logicApproaches:["Brute Force","Sort-based","Hash-based","Bit Manipulation"],followUpQuestions:["What if array elements are in limited range?","How to find all duplicates?"]},{q:"Implement graph traversal using different approaches",a:"Approaches: 1) DFS - recursive/stack-based depth exploration, 2) BFS - queue-based level exploration, 3) Iterative Deepening - combines DFS and BFS benefits, 4) Bidirectional search - from both ends, 5) A* for shortest path with heuristics",topic:"algorithms",difficulty:"Intermediate",category:"Problem-Solving",keywords:["graph","traversal","DFS","BFS","search"],logicApproaches:["Depth-First","Breadth-First","Heuristic-based","Bidirectional"],followUpQuestions:["When to use DFS vs BFS?","How to detect cycles in graphs?"]},{q:"Design different approaches for string pattern matching",a:"Approaches: 1) Naive approach O(nm) - check every position, 2) KMP algorithm O(n+m) - failure function preprocessing, 3) Rabin-Karp O(n+m) - rolling hash comparison, 4) Boyer-Moore - backwards scanning with skip tables, 5) Aho-Corasick for multiple patterns",topic:"algorithms",difficulty:"Advanced",category:"Problem-Solving",keywords:["string matching","pattern","KMP","hash","optimization"],logicApproaches:["Naive Approach","Preprocessing-based","Hash-based","Skip-based"],followUpQuestions:["How does rolling hash work?","What about fuzzy string matching?"]},{q:"Implement different approaches for finding shortest path in graphs",a:"Approaches: 1) Dijkstra - single source shortest path with non-negative weights, 2) Bellman-Ford - handles negative weights, detects cycles, 3) Floyd-Warshall - all pairs shortest paths, 4) A* - heuristic-based for specific target, 5) Johnson's algorithm for sparse graphs",topic:"algorithms",difficulty:"Advanced",category:"Problem-Solving",keywords:["shortest path","graph","Dijkstra","dynamic programming"],logicApproaches:["Greedy Approach","Dynamic Programming","Heuristic Search","All-pairs"],followUpQuestions:["How to handle negative weight cycles?","What about real-time pathfinding?"]},{q:"Implement different approaches for handling asynchronous operations in JavaScript",a:"Approaches: 1) Callbacks - traditional function passing, 2) Promises - chainable with .then(), 3) Async/Await - synchronous-looking asynchronous code, 4) Observables - reactive streams with operators, 5) Generators - pausable functions for lazy evaluation",topic:"javascript",difficulty:"Intermediate",category:"Technical",keywords:["asynchronous","promises","async await","callbacks","observables"],logicApproaches:["Callback Pattern","Promise Chain","Async/Await Pattern","Reactive Programming"],followUpQuestions:["How to handle error propagation?","What about parallel vs sequential execution?"]},{q:"Design different strategies for component communication in Angular",a:"Strategies: 1) Parent-Child via @Input/@Output, 2) Service injection with shared state, 3) EventEmitter for custom events, 4) ViewChild/ContentChild for direct access, 5) NgRx for complex state management, 6) Subject/BehaviorSubject for reactive communication",topic:"angular",difficulty:"Intermediate",category:"Design",keywords:["component communication","angular","input output","services","state management"],logicApproaches:["Direct Binding","Service-mediated","Event-driven","State Management"],followUpQuestions:["When to use each pattern?","How to avoid tight coupling?"]},{q:"Implement different caching strategies for web applications",a:"Strategies: 1) Browser caching with HTTP headers (Cache-Control, ETag), 2) Service Worker caching for offline support, 3) Memory caching in JavaScript with Map/WeakMap, 4) Local/Session Storage for simple data, 5) IndexedDB for complex client-side storage, 6) CDN caching for static assets",topic:"web-performance",difficulty:"Advanced",category:"Design",keywords:["caching","performance","service worker","local storage","CDN"],logicApproaches:["HTTP Caching","Client-side Storage","Service Worker Strategy","Memory Caching"],followUpQuestions:["How to handle cache invalidation?","What about cache-first vs network-first strategies?"]},{q:"Design different approaches for API versioning",a:"Approaches: 1) URL versioning (/api/v1/users), 2) Header versioning (Accept: application/vnd.api+json;version=1), 3) Query parameter (?version=1), 4) Content negotiation, 5) Semantic versioning with backward compatibility, 6) Microservice versioning strategies",topic:"api-design",difficulty:"Intermediate",category:"Design",keywords:["API versioning","REST","backward compatibility","microservices"],logicApproaches:["URL-based","Header-based","Parameter-based","Content Negotiation"],followUpQuestions:["How to deprecate old versions?","What about breaking changes?"]},{q:"Implement different approaches for handling database transactions",a:"Approaches: 1) ACID transactions with explicit begin/commit/rollback, 2) Optimistic locking with version numbers, 3) Pessimistic locking with SELECT FOR UPDATE, 4) Distributed transactions with 2-phase commit, 5) Saga pattern for microservices, 6) Event sourcing for audit trails",topic:"database",difficulty:"Advanced",category:"Technical",keywords:["transactions","ACID","locking","distributed systems","consistency"],logicApproaches:["Explicit Transactions","Optimistic Concurrency","Pessimistic Locking","Distributed Coordination"],followUpQuestions:["How to handle deadlocks?","What about eventual consistency?"]},{q:"Design different approaches for implementing pagination",a:"Approaches: 1) Offset-based pagination (LIMIT/OFFSET), 2) Cursor-based pagination with unique keys, 3) Keyset pagination for better performance, 4) Time-based pagination for chronological data, 5) Search-after for Elasticsearch, 6) Virtual scrolling for large datasets",topic:"database",difficulty:"Intermediate",category:"Technical",keywords:["pagination","offset","cursor","performance","large datasets"],logicApproaches:["Offset-based","Cursor-based","Keyset-based","Virtual Scrolling"],followUpQuestions:["What are the trade-offs of each approach?","How to handle real-time data changes?"]}];analyzeAnswerWithAI(t,i,e){console.group("\u{1F916} Advanced AI Answer Analysis"),console.log("\u{1F4DD} Question:",e.q),console.log("\u{1F464} User Answer:",t),console.log("\u2705 Expected Answer:",i);let n=t.toLowerCase().split(/\W+/),o=i.toLowerCase().split(/\W+/),s=e.keywords||[],a=e.logicApproaches||[],p=this.detectLogicPatterns(t,e),A=this.findAlternativeApproaches(t,e),S=s.filter(k=>n.some(q=>q.includes(k.toLowerCase())||k.toLowerCase().includes(q))).length,g=this.getLogicMatches(t,a),w=0,G=s.length>0?S/s.length*.3:.15,K=this.calculateLogicScore(g,a,p),V=n.filter(k=>o.includes(k)&&k.length>3),J=o.length>0?V.length/o.length*.2:.1,Y=this.validateOutputEquivalence(t,i,e);w=G+K+J+Y,w=Math.min(w,1);let I=this.generateAdvancedFeedback(w,S,s,g,p),Z=this.generateSuggestions(e,g,p,A),X=this.formatDetectedLogic(g,p);return console.log("\u{1F4CA} Keyword Matches:",S,"/",s.length),console.log("\u{1F9E0} Logic Approaches Detected:",g),console.log("\u{1F50D} Advanced Patterns:",p),console.log("\u{1F504} Alternative Approaches:",A),console.log("\u{1F4C8} Final Score:",Math.round(w*100),"%"),console.log("\u{1F4AC} Advanced Feedback:",I),console.groupEnd(),{score:w,feedback:I,logicApproach:X,suggestions:Z,alternativeApproaches:A}}detectLogicPatterns(t,i){let e=[],n=t.toLowerCase();return(n.includes("recursion")||n.includes("recursive"))&&e.push("Recursive Approach"),(n.includes("iteration")||n.includes("loop")||n.includes("for")||n.includes("while"))&&e.push("Iterative Approach"),(n.includes("dynamic programming")||n.includes("memoization"))&&e.push("Dynamic Programming"),n.includes("divide and conquer")&&e.push("Divide and Conquer"),n.includes("greedy")&&e.push("Greedy Algorithm"),n.includes("backtrack")&&e.push("Backtracking"),(n.includes("hash")||n.includes("map")||n.includes("dictionary"))&&e.push("Hash-based Solution"),n.includes("stack")&&e.push("Stack-based Solution"),n.includes("queue")&&e.push("Queue-based Solution"),(n.includes("tree")||n.includes("binary"))&&e.push("Tree-based Solution"),n.includes("graph")&&e.push("Graph-based Solution"),n.includes("singleton")&&e.push("Singleton Pattern"),n.includes("factory")&&e.push("Factory Pattern"),n.includes("observer")&&e.push("Observer Pattern"),n.includes("decorator")&&e.push("Decorator Pattern"),(n.includes("thread")||n.includes("concurrent"))&&e.push("Multithreaded Approach"),(n.includes("lock")||n.includes("synchronized"))&&e.push("Lock-based Synchronization"),(n.includes("atomic")||n.includes("cas"))&&e.push("Lock-free Programming"),(n.includes("cache")||n.includes("memoiz"))&&e.push("Caching Strategy"),(n.includes("lazy")||n.includes("defer"))&&e.push("Lazy Loading"),n.includes("eager")&&e.push("Eager Loading"),e}findAlternativeApproaches(t,i){let e=[],n=t.toLowerCase();return(n.includes("another way")||n.includes("alternative")||n.includes("also"))&&e.push("Multiple Solutions Discussed"),(n.includes("trade-off")||n.includes("pros and cons"))&&e.push("Trade-off Analysis"),(n.includes("optimize")||n.includes("performance"))&&e.push("Performance Optimization"),(n.includes("scale")||n.includes("distributed"))&&e.push("Scalability Considerations"),e}getLogicMatches(t,i){let e=t.toLowerCase(),n=[];return i.forEach(o=>{let s=o.toLowerCase().split(/\s+/);s.filter(p=>e.includes(p)||e.includes(p.substring(0,p.length-2))).length>=Math.ceil(s.length*.6)&&n.push(o)}),n}calculateLogicScore(t,i,e){let n=i.length>0?t.length/i.length*.3:.15,o=Math.min(e.length*.05,.1),s=t.length>1?.05:0;return n+o+s}validateOutputEquivalence(t,i,e){let n=t.toLowerCase();return n.includes("same result")||n.includes("same output")||n.includes("equivalent")?.1:n.includes("return")||n.includes("output")||n.includes("result")?.05:0}generateAdvancedFeedback(t,i,e,n,o){return t>=.9?"Outstanding! Comprehensive understanding with multiple approaches and advanced concepts.":t>=.8?"Excellent! Strong technical knowledge with good coverage of different approaches.":t>=.7?"Very Good! Solid understanding with room for exploring alternative solutions.":t>=.6?"Good answer! You covered the main concepts. Consider discussing trade-offs.":t>=.4?"Partial understanding. Focus on explaining different implementation approaches.":"Needs significant improvement. Study various problem-solving strategies."}generateSuggestions(t,i,e,n){let o=[];if(t.logicApproaches&&i.length<t.logicApproaches.length){let s=t.logicApproaches.filter(a=>!i.includes(a));o.push(`Consider exploring: ${s.join(", ")}`)}return e.length===0&&o.push("Try to identify the algorithmic pattern or data structure used"),n.length===0&&o.push("Discuss trade-offs and alternative approaches"),t.followUpQuestions&&t.followUpQuestions.length>0&&o.push(`Advanced topics: ${t.followUpQuestions.join("; ")}`),o}formatDetectedLogic(t,i){let e=[...t,...i];return e.length>0?e.join(", "):"Basic approach detected"}qaBank={java:[],python:[],csharp:[],angular:[],spring:[],springboot:[]};ngOnInit(){this.populateBanksFromComponents()}populateBanksFromComponents(){try{let t=new H;Array.isArray(t.qaData)&&(this.qaBank.java=t.qaData.map(i=>({q:String(i.q),a:String(i.a),topic:"java",difficulty:"Basic",category:"Technical",keywords:this.extractKeywords(String(i.q)+" "+String(i.a))})))}catch{}try{let t=new R;Array.isArray(t.qaData)&&(this.qaBank.python=t.qaData.map(i=>({q:String(i.q),a:String(i.a),topic:"python",difficulty:"Basic",category:"Technical",keywords:this.extractKeywords(String(i.q)+" "+String(i.a))})))}catch{}try{let t=new N;Array.isArray(t.qaData)&&(this.qaBank.csharp=t.qaData.map(i=>({q:String(i.q),a:String(i.a),topic:"csharp",difficulty:"Basic",category:"Technical",keywords:this.extractKeywords(String(i.q)+" "+String(i.a))})))}catch{}try{let t=new F;Array.isArray(t.qaData)&&(this.qaBank.angular=t.qaData.map(i=>({q:String(i.q),a:String(i.a),topic:"angular",difficulty:"Basic",category:"Technical",keywords:this.extractKeywords(String(i.q)+" "+String(i.a))})))}catch{}try{let t=new U;Array.isArray(t.qaData)&&(this.qaBank.spring=t.qaData.map(i=>({q:String(i.q),a:String(i.a),topic:"spring",difficulty:"Basic",category:"Technical",keywords:this.extractKeywords(String(i.q)+" "+String(i.a))})))}catch{}try{let t=new j;Array.isArray(t.qaData)&&(this.qaBank.springboot=t.qaData.map(i=>({q:String(i.q),a:String(i.a),topic:"springboot",difficulty:"Basic",category:"Technical",keywords:this.extractKeywords(String(i.q)+" "+String(i.a))})))}catch{}this.mergeWithAIQuestions(),console.group("\u{1F4DA} Enhanced Question Bank Loaded"),console.log("\u{1F525} Java Questions:",this.qaBank.java.length),console.log("\u{1F40D} Python Questions:",this.qaBank.python.length),console.log("\u{1F4BB} C# Questions:",this.qaBank.csharp.length),console.log("\u2699\uFE0F Angular Questions:",this.qaBank.angular.length),console.log("\u{1F331} Spring Questions:",this.qaBank.spring.length),console.log("\u{1F680} Spring Boot Questions:",this.qaBank.springboot.length),console.log("\u{1F916} AI Enhanced Questions:",this.aiQuestionBank.length),console.groupEnd()}extractKeywords(t){let i=["what","is","how","the","and","or","but","in","on","at","to","for","of","with","by","are","can","you","explain","diff","between"];return t.toLowerCase().split(/\W+/).filter(e=>e.length>3&&!i.includes(e)).slice(0,5)}mergeWithAIQuestions(){this.aiQuestionBank.forEach(t=>{let i=t.topic;this.qaBank[i]&&this.qaBank[i].push(t)})}onSubmit(){return h(this,null,function*(){let t=this.userInput.trim();!t||this.isLoading||(yield this.processUserText(t))})}processUserText(t){return h(this,null,function*(){this.messages.push({role:"user",content:t}),this.userInput="",this.isInterview&&this.awaitingAnswer?yield this.handleInterviewAnswer(t):yield this.generateAssistantReply(t,"qa")})}startInterview(){return h(this,null,function*(){if(this.isLoading)return;this.isInterview=!0,this.awaitingAnswer=!1,this.questionNumber=0,this.questionIndex=0,this.buildQuestionPool();let t=Math.min(this.maxQuestions,this.questionPool.length);if(t===0){this.messages.push({role:"assistant",content:"No questions available for the selected topic."}),this.isInterview=!1;return}this.maxQuestions=t,this.transcript=[],console.group("\u{1F3AF} Enhanced AI Mock Interview Started"),console.log(`\u{1F4CA} Total Questions: ${this.maxQuestions}`),console.log(`\u{1F3AD} Selected Topics: ${Object.keys(this.selectedTopics).filter(i=>this.selectedTopics[i]).join(", ")}`),console.log(`\u{1F500} Question Shuffle: ${this.shuffleQuestions?"Enabled":"Disabled"}`),console.log("\u{1F916} AI Analysis: Enhanced logic detection and feedback"),console.log("\u{1F4C8} Features: Multi-approach analysis, keyword detection, difficulty assessment"),console.log("\u{1F3C6} Scoring: Advanced semantic similarity with logic approach bonuses"),console.groupEnd(),this.messages.push({role:"assistant",content:`\u{1F680} Starting enhanced AI mock interview with ${this.maxQuestions} questions. AI will analyze your logic approaches and provide detailed feedback!`}),yield this.generateNextQuestion(),this.autoMic=!0,this.startListening()})}handleInterviewAnswer(t){return h(this,null,function*(){if(this.processingAnswer)return;this.processingAnswer=!0,this.awaitingAnswer=!1,console.group(`\u{1F3AF} PROCESSING ANSWER ${this.questionNumber}`),console.log(`\u{1F4CB} Question: ${this.lastAskedQuestion}`),console.log(`\u{1F464} User Answer: ${t}`),console.log(`\u{1F4C8} Progress: ${this.questionNumber}/${this.maxQuestions}`);let i=this.lastAskedItem?.a||"",e;if(this.lastAskedItem&&"keywords"in this.lastAskedItem)e=this.analyzeAnswerWithAI(t,i,this.lastAskedItem);else{let s=this.simpleSimilarity((t||"").toLowerCase(),(i||"").toLowerCase());e={score:s,feedback:s>=.6?"Good coverage.":s>=.3?"Partial coverage.":"Needs improvement.",logicApproach:"Standard approach",suggestions:[],alternativeApproaches:[]}}this.transcript.push({question:this.lastAskedQuestion||"",answer:t,matchedAnswer:i||void 0,matchScore:e.score});let n=[`\u{1F4AC} Advanced Feedback: ${e.feedback}`,`\u{1F9E0} Logic Patterns Detected: ${e.logicApproach}`,`\u{1F4CA} AI Score: ${Math.round(e.score*100)}%`];e.alternativeApproaches&&e.alternativeApproaches.length>0&&n.push(`\u{1F504} Alternative Approaches: ${e.alternativeApproaches.join(", ")}`),e.suggestions.length>0&&n.push(`\u{1F4A1} AI Suggestions: ${e.suggestions.join("; ")}`),n.push(`\u2705 Ideal Answer: ${i||"N/A"}`);let o=n.join(`
`);if(console.log(`\u{1F4C8} Advanced AI Analysis Score: ${Math.round(e.score*100)}%`),console.log(`\u{1F9E0} Logic Patterns: ${e.logicApproach}`),console.log(`\u{1F4AC} Enhanced Feedback: ${e.feedback}`),e.alternativeApproaches&&e.alternativeApproaches.length>0&&(console.log("\u{1F504} Alternative Approaches Found:"),e.alternativeApproaches.forEach((s,a)=>{console.log(`   ${a+1}. ${s}`)})),e.suggestions.length>0&&(console.log("\u{1F4A1} AI-Generated Suggestions:"),e.suggestions.forEach((s,a)=>{console.log(`   ${a+1}. ${s}`)})),console.groupEnd(),this.messages.push({role:"assistant",content:o}),this.maybeSpeak(e.feedback),this.questionNumber<this.maxQuestions)this.processingAnswer=!1,yield this.generateNextQuestion(),this.autoMic&&!this.isListening&&this.startListening();else{this.processingAnswer=!1,this.isInterview=!1,this.awaitingAnswer=!1;let s=this.computeScorePercent();this.persistTranscript();let a=this.generateCompletionSummary();this.messages.push({role:"assistant",content:a}),this.maybeSpeak(`Interview finished. Your overall score is ${s}%.`),this.autoMic=!1,this.stopListening()}})}generateCompletionSummary(){let t=this.computeScorePercent(),i=this.transcript.filter(a=>(a.matchScore||0)>=.8).length,e=this.transcript.filter(a=>(a.matchScore||0)>=.6&&(a.matchScore||0)<.8).length,n=this.transcript.filter(a=>(a.matchScore||0)>=.4&&(a.matchScore||0)<.6).length,o=this.transcript.length-i-e-n;console.group("\u{1F4C8} Final Interview Analysis"),console.log(`\u{1F3C6} Overall Score: ${t}%`),console.log(`\u2B50 Excellent Answers: ${i}`),console.log(`\u2705 Good Answers: ${e}`),console.log(`\u{1F7E1} Moderate Answers: ${n}`),console.log(`\u{1F534} Needs Improvement: ${o}`),console.table(this.transcript.map((a,p)=>({"Question #":p+1,Score:`${Math.round((a.matchScore||0)*100)}%`,Question:a.question.substring(0,50)+"...",Answer:a.answer.substring(0,30)+"...",Status:(a.matchScore||0)>=.8?"\u2B50 EXCELLENT":(a.matchScore||0)>=.6?"\u2705 GOOD":(a.matchScore||0)>=.4?"\u{1F7E1} MODERATE":"\u{1F534} NEEDS WORK"}))),console.groupEnd();let s=["\u{1F3C6} **INTERVIEW COMPLETED**",`\u{1F4C8} Overall Score: ${t}%`,"","\u{1F4C9} **Performance Breakdown:**",`\u2B50 Excellent (80%+): ${i} answers`,`\u2705 Good (60-79%): ${e} answers`,`\u{1F7E1} Moderate (40-59%): ${n} answers`,`\u{1F534} Needs Improvement (<40%): ${o} answers`,"","\u{1F4CA} **Recommendations:**"];return t>=80?s.push("\u2728 Outstanding performance! You demonstrate strong technical knowledge."):t>=70?s.push("\u{1F44D} Solid performance! Focus on explaining different implementation approaches."):t>=60?s.push("\u{1F4DA} Good foundation! Study alternative solutions and best practices."):s.push("\u{1F4AA} Keep practicing! Review fundamental concepts and practice explaining technical topics."),s.join(`
`)}generateNextQuestion(){return h(this,null,function*(){if(this.questionIndex>=this.questionPool.length)return;this.questionNumber++;let t=this.questionPool[this.questionIndex];this.lastAskedItem=t,this.lastAskedQuestion=t.q,console.group(`\u{1F3AF} QUESTION ${this.questionNumber}/${this.maxQuestions}`),console.log(`\u{1F4CB} Question: ${t.q}`),"difficulty"in t&&(console.log(`\u2699\uFE0F Difficulty: ${t.difficulty}`),console.log(`\u{1F4DA} Category: ${t.category}`),console.log(`\u{1F3F7}\uFE0F Topic: ${t.topic}`),t.keywords&&t.keywords.length>0&&console.log(`\u{1F511} Key Concepts: ${t.keywords.join(", ")}`),t.logicApproaches&&t.logicApproaches.length>0&&console.log(`\u{1F9E0} Expected Approaches: ${t.logicApproaches.join(", ")}`)),console.log(`\u{1F4C8} Progress: ${Math.round(this.questionNumber/this.maxQuestions*100)}% complete`),console.groupEnd(),this.messages.push({role:"assistant",content:`Q${this.questionNumber}: ${t.q}`}),this.maybeSpeak(t.q),this.awaitingAnswer=!0,this.questionIndex++})}buildQuestionPool(){let t=Object.keys(this.selectedTopics).filter(o=>this.selectedTopics[o]),i=[];for(let o of t){let s=this.qaBank[o]||[],a=s.filter(g=>"keywords"in g&&g.keywords&&g.keywords.length>0),p=s.filter(g=>!("keywords"in g)||!g.keywords||g.keywords.length===0),A=Math.ceil(a.length*.7),S=Math.floor(p.length*.3);i=i.concat(a.slice(0,A)),i=i.concat(p.slice(0,S))}if(this.shuffleQuestions)for(let o=i.length-1;o>0;o--){let s=Math.floor(Math.random()*(o+1));[i[o],i[s]]=[i[s],i[o]]}this.questionPool=i,console.group("\u{1F4DA} Question Pool Analysis"),console.log(`\u{1F522} Total Questions: ${i.length}`);let e=i.filter(o=>"keywords"in o&&o.keywords&&o.keywords.length>0).length,n=i.length-e;console.log(`\u{1F916} AI-Enhanced Questions: ${e}`),console.log(`\u{1F4DC} Legacy Questions: ${n}`),t.forEach(o=>{let s=i.filter(a=>a.topic===o).length;console.log(`\u{1F3F7}\uFE0F ${o.toUpperCase()}: ${s} questions`)}),console.groupEnd()}localFallback(t){return/angular/i.test(t)?"Angular is a TypeScript framework for SPAs. Focus on components, templates, DI, and routing.":/spring\s*boot|springboot/i.test(t)?"Spring Boot auto-configures Spring apps with starters and embedded servers.":/spring/i.test(t)?"Spring provides IoC/DI, AOP, MVC, Data, and Security for Java apps.":/python/i.test(t)?"Python is an interpreted, high-level language with emphasis on readability.":/c#|csharp/i.test(t)?"C# is a modern, object-oriented language for .NET with strong typing and async/await.":/java/i.test(t)?"Java is an object-oriented language running on the JVM. Learn OOP, collections, streams, exceptions.":"I can conduct mock interviews from your selected topics. Click Start Interview to begin."}generateAssistantReply(t,i="qa"){return h(this,null,function*(){let e=this.localFallback(t);this.messages.push({role:"assistant",content:e}),this.maybeSpeak(e)})}askMeAQuestion(){return h(this,null,function*(){if(this.buildQuestionPool(),this.questionPool.length===0){this.messages.push({role:"assistant",content:"No questions available in selected topics."});return}let t=this.questionPool[Math.floor(Math.random()*this.questionPool.length)].q;this.lastAskedQuestion=t,this.awaitingAnswer=!0,this.messages.push({role:"assistant",content:t}),this.maybeSpeak(t)})}toggleTTS(){if(this.ttsEnabled=!this.ttsEnabled,!this.ttsEnabled&&typeof window<"u")try{window.speechSynthesis.cancel()}catch{}}maybeSpeak(t){if(!this.ttsEnabled||typeof window>"u"||!("speechSynthesis"in window))return;let i=new SpeechSynthesisUtterance(t);i.rate=1,i.pitch=1,window.speechSynthesis.cancel(),window.speechSynthesis.speak(i)}toggleListening(){this.isListening?(this.stopRequested=!0,this.stopListening()):(this.stopRequested=!1,this.startListening())}startListening(){if(this.isLoading||typeof window>"u"||this.isListening)return;let t=window,i=t.SpeechRecognition||t.webkitSpeechRecognition;if(!i){this.messages.push({role:"assistant",content:"Speech recognition not supported in this browser."});return}this.recognition=new i,this.recognition.lang="en-US",this.recognition.interimResults=!0,this.recognition.maxAlternatives=1,this.recognition.onresult=e=>h(this,null,function*(){for(let n=e.resultIndex;n<e.results.length;n++){let o=e.results[n],s=o?.[0]?.transcript?.trim();if(s&&o.isFinal){this.recognition.stop(),this.isListening=!1,yield this.processUserText(s);return}}}),this.recognition.onend=()=>{this.isListening=!1,!this.stopRequested&&this.autoMic&&this.isInterview&&this.awaitingAnswer&&this.questionNumber<=this.maxQuestions&&setTimeout(()=>{this.awaitingAnswer&&!this.isListening&&this.startListening()},500)},this.recognition.onerror=()=>{this.isListening=!1,!this.stopRequested&&this.autoMic&&this.isInterview&&this.questionNumber<this.maxQuestions&&setTimeout(()=>this.startListening(),400)},this.recognition.start(),this.isListening=!0}stopListening(){try{this.recognition&&this.recognition.stop()}catch{}if(this.isListening=!1,this.isInterview){this.isInterview=!1,this.awaitingAnswer=!1;let t=this.computeScorePercent();this.persistTranscript();let i=`Interview stopped by user. Score: ${t}%.
Summary: ${this.summaryLine()}`;this.messages.push({role:"assistant",content:i}),this.maybeSpeak(i)}}simpleSimilarity(t,i){let e=new Set(t.split(/[^a-z0-9]+/i).filter(Boolean)),n=new Set(i.split(/[^a-z0-9]+/i).filter(Boolean));return[...e].filter(o=>n.has(o)).length/(new Set([...e,...n]).size||1)}computeScorePercent(){if(this.transcript.length===0)return 0;let t=this.transcript.reduce((i,e)=>i+(e.matchScore||0),0)/this.transcript.length;return Math.round(t*100)}summaryLine(){let t=this.transcript.filter(n=>(n.matchScore||0)>=.6).length,i=this.transcript.filter(n=>(n.matchScore||0)>=.3&&(n.matchScore||0)<.6).length,e=this.transcript.length-t-i;return`Strong: ${t}, Moderate: ${i}, Needs improvement: ${e}.`}persistTranscript(){try{let t=`ai_interview_${this.topic}_${Date.now()}`;localStorage.setItem(t,JSON.stringify({topic:this.topic,score:this.computeScorePercent(),transcript:this.transcript}))}catch{}}static \u0275fac=function(i){return new(i||b)};static \u0275cmp=M({type:b,selectors:[["app-ai-interviews"]],decls:43,vars:16,consts:[[1,"chat-container"],[1,"title"],[1,"chat-window"],["class","message",3,"user","assistant",4,"ngFor","ngForOf"],[1,"input-row"],["type","checkbox","name","t_java",3,"ngModelChange","ngModel"],["type","checkbox","name","t_python",3,"ngModelChange","ngModel"],["type","checkbox","name","t_csharp",3,"ngModelChange","ngModel"],["type","checkbox","name","t_angular",3,"ngModelChange","ngModel"],["type","checkbox","name","t_spring",3,"ngModelChange","ngModel"],["type","checkbox","name","t_springboot",3,"ngModelChange","ngModel"],[2,"margin-left","12px"],["type","checkbox","name","shuffle",3,"ngModelChange","ngModel"],[1,"input-row",3,"ngSubmit"],["name","message","placeholder","Type your question or answer...",3,"ngModelChange","ngModel","disabled"],["type","submit",3,"disabled"],["type","button",3,"click","disabled"],["type","button",3,"click"],[1,"hint"],[1,"message"],[1,"bubble"]],template:function(i,e){i&1&&(c(0,"div",0)(1,"h1",1),d(2,"AI Interviews"),r(),c(3,"div",2),P(4,ee,3,5,"div",3),r(),c(5,"div",4)(6,"label"),d(7,"Topics:\xA0"),r(),c(8,"label")(9,"input",5),f("ngModelChange",function(o){return m(e.selectedTopics.java,o)||(e.selectedTopics.java=o),o}),r(),d(10," Java"),r(),c(11,"label")(12,"input",6),f("ngModelChange",function(o){return m(e.selectedTopics.python,o)||(e.selectedTopics.python=o),o}),r(),d(13," Python"),r(),c(14,"label")(15,"input",7),f("ngModelChange",function(o){return m(e.selectedTopics.csharp,o)||(e.selectedTopics.csharp=o),o}),r(),d(16," C#"),r(),c(17,"label")(18,"input",8),f("ngModelChange",function(o){return m(e.selectedTopics.angular,o)||(e.selectedTopics.angular=o),o}),r(),d(19," Angular"),r(),c(20,"label")(21,"input",9),f("ngModelChange",function(o){return m(e.selectedTopics.spring,o)||(e.selectedTopics.spring=o),o}),r(),d(22," Spring"),r(),c(23,"label")(24,"input",10),f("ngModelChange",function(o){return m(e.selectedTopics.springboot,o)||(e.selectedTopics.springboot=o),o}),r(),d(25," Spring Boot"),r(),c(26,"label",11)(27,"input",12),f("ngModelChange",function(o){return m(e.shuffleQuestions,o)||(e.shuffleQuestions=o),o}),r(),d(28," Shuffle"),r()(),c(29,"form",13),v("ngSubmit",function(){return e.onSubmit()}),c(30,"input",14),f("ngModelChange",function(o){return m(e.userInput,o)||(e.userInput=o),o}),r(),c(31,"button",15),d(32,"Send"),r(),c(33,"button",16),v("click",function(){return e.askMeAQuestion()}),d(34,"Ask me a question"),r(),c(35,"button",16),v("click",function(){return e.startInterview()}),d(36,"Start Interview"),r(),c(37,"button",16),v("click",function(){return e.toggleListening()}),d(38),r(),c(39,"button",17),v("click",function(){return e.toggleTTS()}),d(40),r()(),c(41,"div",18),d(42," Tip: To enable live AI, save your OpenAI API key via the browser console: localStorage.setItem('openai_api_key','YOUR_KEY') "),r()()),i&2&&(l(4),y("ngForOf",e.messages),l(5),u("ngModel",e.selectedTopics.java),l(3),u("ngModel",e.selectedTopics.python),l(3),u("ngModel",e.selectedTopics.csharp),l(3),u("ngModel",e.selectedTopics.angular),l(3),u("ngModel",e.selectedTopics.spring),l(3),u("ngModel",e.selectedTopics.springboot),l(3),u("ngModel",e.shuffleQuestions),l(3),u("ngModel",e.userInput),y("disabled",e.isLoading),l(),y("disabled",e.isLoading||!e.userInput.trim()),l(2),y("disabled",e.isLoading),l(2),y("disabled",e.isLoading||e.isInterview),l(2),y("disabled",e.isLoading),l(),C(e.isListening?"Stop Mic":"Start Mic"),l(2),C(e.ttsEnabled?"Mute":"Unmute"))},dependencies:[Q,L,z,O,D,E,_,W,B,x],styles:[".chat-container[_ngcontent-%COMP%]{max-width:800px;margin:0 auto;padding:16px}.title[_ngcontent-%COMP%]{text-align:center;margin-bottom:16px}.chat-window[_ngcontent-%COMP%]{border:1px solid #ddd;border-radius:8px;height:420px;overflow-y:auto;padding:12px;background:#fafafa}.message[_ngcontent-%COMP%]{display:flex;margin-bottom:10px}.message.user[_ngcontent-%COMP%]{justify-content:flex-end}.message.assistant[_ngcontent-%COMP%]{justify-content:flex-start}.bubble[_ngcontent-%COMP%]{max-width:80%;padding:10px 12px;border-radius:12px;background:#e1f5fe}.message.user[_ngcontent-%COMP%]   .bubble[_ngcontent-%COMP%]{background:#d1ffd6}.input-row[_ngcontent-%COMP%]{display:flex;gap:8px;margin-top:12px}.input-row[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{flex:1;padding:10px}.hint[_ngcontent-%COMP%]{margin-top:10px;font-size:12px;color:#666}"]})};export{$ as AiInterviews};
