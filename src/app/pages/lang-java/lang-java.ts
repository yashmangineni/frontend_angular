import { CommonModule } from '@angular/common';
import { Component } from '@angular/core';
interface QA {
  q: string;
  a: string;
}
@Component({
  selector: 'app-lang-java',
  standalone: true,

  imports: [CommonModule],
  templateUrl: './lang-java.html',
  styleUrls: ['./lang-java.css']
 
})


export class LangJava {

  qaData: QA[] = [
    { q: 'What is Java??', a: 'Java is a high-level, object-oriented programming language designed to have as few implementation dependencies as possible. Itâ€™s platform-independent due to the use of the Java Virtual Machine (JVM).' },
      { q: 'What are the main features of Java?', a: 'Object-Oriented,Platform-Independent (Write Once, Run Anywhere),Strong Memory Management,Automatic Garbage Collection,Multithreaded' },
      { q: 'What is a ClassLoader?', a: 'A component that loads classes at runtime into the JVM.' },
      { q: 'What is the difference between JDK and JRE?', a: 'JDK = JRE + development tools. JRE runs Java apps; JDK builds them.' },
      {q:'what is jvm?', a:'JVM (Java Virtual Machine) executes Java bytecode and provides platform independence.'},
      {q:'what is jdk?', a:'JDK (Java Development Kit) is a software development kit for Java. It includes the JRE, compiler, and other tools for building Java applications.'},
      {q:'what is jre?', a:'JRE (Java Runtime Environment) is a software environment for running Java applications. It includes the JVM and other libraries for running Java applications.'},
      {q:'what is java platform?', a:'Java Platform is a software platform for developing and running Java applications. It includes the JVM, JRE, and other libraries for developing and running Java applications.'},
      {q:'what is java virtual machine?', a:'JVM (Java Virtual Machine) is a virtual machine that executes Java bytecode. It is platform-independent and allows Java applications to run on any platform.'},
      {q:'what is java bytecode?', a:'Java bytecode is the intermediate code generated by the Java compiler. It is platform-independent and can be executed by the JVM.'},
      {q:'what is java class?', a:'Java class is a blueprint for creating objects. It contains the code for the object and the data for the object.'},
      {q:'what is java object?', a:'Java object is an instance of a class. It contains the data for the object and the code for the object.'},
      {q:'what is java inheritance?', a:'Inheritance is a mechanism that allows a class to inherit the properties and methods of another class.'},
      {q:'what is java polymorphism?', a:'Polymorphism is a mechanism that allows a class to have multiple forms. It is achieved through method overriding and method overloading.'},
      {q:'what is java encapsulation?', a:'Encapsulation is a mechanism that allows a class to hide the implementation details of the class. It is achieved through access modifiers.'},
      {q:'what is java abstraction?', a:'Abstraction is a mechanism that allows a class to hide the implementation details of the class. It is achieved through abstract classes and interfaces.'},
      {q:'what is java interface?', a:'Interface is a collection of abstract methods. It is used to achieve abstraction.'},
      {q: 'diff between final and finally?', a:'Final is a keyword that is used to declare a constant. Finally is a keyword that is used to execute a block of code after a try-catch block.'},
      {q: 'diff between abstract and interface?', a:'Abstract is a keyword that is used to declare an abstract class. Interface is a keyword that is used to declare an interface.'},
      {q: 'diff between static and dynamic?', a:'Static is a keyword that is used to declare a static variable. Dynamic is a keyword that is used to declare a dynamic variable.'},
     {q: 'diff between public and private?', a:'Public is a keyword that is used to declare a public variable. Private is a keyword that is used to declare a private variable.'},
     {q: 'diff between protected and private?', a:'Protected is a keyword that is used to declare a protected variable. Private is a keyword that is used to declare a private variable.'},
     {q: 'diff between public and protected?', a:'Public is a keyword that is used to declare a public variable. Protected is a keyword that is used to declare a protected variable.'},
     {q: 'diff between public and private?', a:'Public is a keyword that is used to declare a public variable. Private is a keyword that is used to declare a private variable.'},
     {q:'this keyword', a:'This keyword is used to refer to the current object.'},
     {q:'super keyword', a:'Super keyword is used to refer to the parent class.'},
     {q:'diff between super and this keyword', a:'Super keyword is used to refer to the parent class. This keyword is used to refer to the current object.'},
     {q:'diff between static and instance block', a:'Static block is executed before the main method. Instance block is executed before the constructor.'},
     {q:'diff between static and instance variable', a:'Static variable is shared by all objects. Instance variable is shared by all objects.'},
     {q:'diff between static and instance method', a:'Static method is shared by all objects. Instance method is shared by all objects.'},
     {q:'diff between static and instance block', a:'Static block is executed before the main method. Instance block is executed before the constructor.'},
     {q:'diff between static and instance variable', a:'Static variable is shared by all objects. Instance variable is shared by all objects.'},
     {q:'diff between static and instance method', a:'Static method is shared by all objects. Instance method is shared by all objects.'},
     {q:'diff between static and instance block', a:'Static block is executed before the main method. Instance block is executed before the constructor.'},
     {q:'method overloading', a:'Method overloading is a feature that allows a class to have multiple methods with the same name but different parameters. It is achieved through method overloading.'},
     {q:'diff between method overloading and method overriding', a:'Method overloading is a feature that allows a class to have multiple methods with the same name but different parameters. Method overriding is a feature that allows a subclass to override the method of the parent class.'},
     {q:'what is constructor?', a:'Constructor is a special method that is used to initialize objects. It is achieved through constructor.'},
     {q:'diff between constructor and method', a:'Constructor is a special method that is used to initialize objects. Method is a special method that is used to perform some action. Constructor is called when an object of a class is created. Method is called when an object of a class is used.'},
     {q:'what is java constructor chaining?', a:'Constructor chaining is a feature that allows a class to call another constructor of the same class. It is achieved through constructor chaining.'},
     {q:'what is java constructor overloading?', a:'Constructor overloading is a feature that allows a class to have multiple constructors with the same name but different parameters. It is achieved through constructor overloading.'},
     {q:'what is java constructor chaining?', a:'Constructor chaining is a feature that allows a class to call another constructor of the same class. It is achieved through constructor chaining.'},
     {q:'what is garbage collection?', a:'Garbage collection is a process that automatically frees the memory that is no longer used by the program. It is achieved through garbage collection.'},
{q:'what is java memory management?', a:'Java memory management is a process that automatically frees the memory that is no longer used by the program. It is achieved through garbage collection.'},
// String Questions in Java
{ q: 'What is String in Java?', a: 'String in Java is an object that represents a sequence of characters. Strings are immutable in Java.' },
{ q: 'Why are Strings immutable in Java?', a: 'Strings are immutable for security, synchronization, and memory optimization reasons (String pool). Once created, a String object cannot be changed.' },
{ q: 'What is String Pool in Java?', a: 'String Pool (String Intern Pool) is a special memory region inside the heap where string literals are stored to save memory and improve performance.' },
{ q: 'Difference between String, StringBuilder, and StringBuffer?', a: 'String is immutable. StringBuilder is mutable and not thread-safe. StringBuffer is mutable and thread-safe (synchronized).' },
{ q: 'What is the difference between == and equals() in Strings?', a: '== checks reference equality (whether two references point to the same object), while equals() checks the actual content of the strings.' },
{ q: 'How to create a String in Java?', a: 'Strings can be created using string literals (String s = "Hello") or using the new keyword (String s = new String("Hello")).' },
{ q: 'What is intern() method in String?', a: 'The intern() method returns a canonical representation of the String object from the String Pool.' },
{ q: 'What are common methods of String class?', a: 'length(), charAt(), substring(), indexOf(), equals(), equalsIgnoreCase(), compareTo(), toUpperCase(), toLowerCase(), trim(), replace().' },
{ q: 'What is substring() method?', a: 'substring(beginIndex, endIndex) returns a new String that is a part of the original String. The original String remains unchanged.' },
{ q: 'What is difference between StringBuffer and StringBuilder?', a: 'Both are mutable, but StringBuffer is synchronized (thread-safe) whereas StringBuilder is not synchronized (faster in single-threaded cases).' },
{ q: 'Can we use String in switch-case?', a: 'Yes, from Java 7 onwards, Strings can be used in switch statements.' },
{ q: 'How does String concat() differ from + operator?', a: 'Both perform concatenation, but + is internally converted to StringBuilder in most cases for efficiency.' },
{ q: 'What is String.valueOf() method?', a: 'valueOf() converts primitives and objects into their string representation.' },
{ q: 'How are Strings stored in memory?', a: 'String literals are stored in the String Pool, while Strings created with new keyword are stored in the heap outside the pool.' },
{ q: 'What happens if we modify a String?', a: 'A new String object is created since Strings are immutable. The original String remains unchanged.' },
{ q: 'What is the difference between equals() and compareTo()?', a: 'equals() checks equality of contents, while compareTo() compares lexicographically and returns an int (0 if equal, >0 if greater, <0 if smaller).' },
{ q: 'What is reverse() in String?', a: 'String itself does not have reverse(), but StringBuilder and StringBuffer provide reverse() to reverse characters.' },
{ q: 'Can String be extended (inheritance)?', a: 'No, String is a final class in Java, so it cannot be extended.' },
{ q: 'Is String thread-safe?', a: 'Yes, since String is immutable, it is inherently thread-safe.' },

      {q:'what is java exception?', a:'Exception is a class that represents an error that occurs during the execution of a program.'},
      {q:'types of exception?', a:'Exception is a class that represents an error that occurs during the execution of a program.'},
      {q:'what is java checked exception?', a:'Checked exception is a class that represents an error that occurs during the execution of a program.'},
      {q:'what is java unchecked exception?', a:'Unchecked exception is a class that represents an error that occurs during the execution of a program.'},
      {q:'what is throw and throws keyword?', a:'Throw is a keyword that is used to throw an exception. Throws is a keyword that is used to declare an exception.'},
      {q:'what is try and catch block?', a:'Try is a keyword that is used to try a block of code. Catch is a keyword that is used to catch an exception.'},
      {q:'what is finally block?', a:'Finally is a keyword that is used to execute a block of code after a try-catch block.'},
      {q:'what is throw and throws keyword?', a:'Throw is a keyword that is used to throw an exception. Throws is a keyword that is used to declare an exception.'},
      {q:'what is try and catch block?', a:'Try is a keyword that is used to try a block of code. Catch is a keyword that is used to catch an exception.'},
      {q:'what is finally block?', a:'Finally is a keyword that is used to execute a block of code after a try-catch block.'},
      {q:'what is throw and throws keyword?', a:'Throw is a keyword that is used to throw an exception. Throws is a keyword that is used to declare an exception.'},
      {q:'what is java throwable?', a:'Throwable is a class that represents an error that occurs during the execution of a program.'},
      {q:'what is java error?', a:'Error is a class that represents an error that occurs during the execution of a program.'},
      {q:'what is java multithreading?', a:'Multithreading is a technique that allows a program to perform multiple tasks simultaneously. It is achieved through threads.'},
      {q:'what is java synchronization?', a:'Synchronization is a mechanism that allows a thread to access a shared resource in a synchronized manner. It is achieved through synchronized blocks and methods.'},
      {q:'what is java thread?', a:'Thread is a lightweight sub-process that can run concurrently with other threads. It is achieved through threads.'},
      {q:'what is java thread pool?', a:'Thread pool is a collection of threads that are used to execute tasks. It is achieved through thread pools.'},
      {q:'what is java thread safety?', a:'Thread safety is a mechanism that allows a thread to access a shared resource in a thread-safe manner. It is achieved through synchronization.'},
      {q:'what is java thread local?', a:'Thread local is a mechanism that allows a thread to access a shared resource in a thread-local manner. It is achieved through thread locals.'},
      {q:'what is java thread local variable?', a:'Thread local variable is a variable that is local to a thread. It is achieved through thread local variables.'},
      {q:'what is java thread local storage?', a:'Thread local storage is a mechanism that allows a thread to access a shared resource in a thread-local storage manner. It is achieved through thread local storage.'},
      {q:'what is java thread local storage variable?', a:'Thread local storage variable is a variable that is local to a thread. It is achieved through thread local storage variables.'},
     {q:'exaplin about join yield and sleep method in thread', a:'Join is a method that is used to wait for a thread to die. Yield is a method that is used to pause a thread. Sleep is a method that is used to sleep a thread for a certain amount of time.'},
     {q:'types of thread creation', a:'There are two types of thread creation. 1. By extending Thread class. 2. By implementing Runnable interface.'},
     {q:'diff between thread and process', a:'Thread is a lightweight sub-process that can run concurrently with other threads. Process is a heavyweight process that can run concurrently with other processes.'},
     {q:'explain about thread priority', a:'Thread priority is a mechanism that allows a thread to have a priority. The priority of a thread is used to determine the order in which the threads are executed. The priority of a thread is set using the setPriority method.'},
     {q:'explain about thread synchronization', a:'Thread synchronization is a mechanism that allows a thread to access a shared resource in a synchronized manner. It is achieved through synchronized blocks and methods.'},
     {q:'what is deadlock?', a:'Deadlock is a situation that occurs when two or more threads are waiting for each other to release the lock. It is achieved through deadlock.'},
     {q:'what is race condition?', a:'Race condition is a situation that occurs when two or more threads are trying to access a shared resource at the same time. It is achieved through race condition.'},
     {q:'what is java serialization?', a:'Serialization is the process of converting a Java object into a byte stream. It is achieved through serialization.'},
     {q:'what is java deserialization?', a:'Deserialization is the process of converting a byte stream into a Java object. It is achieved through deserialization.'},
{q:'what is java reflection?', a:'Reflection is the process of inspecting and modifying the runtime behavior of a Java program. It is achieved through reflection.'},
{q:'what is collection framework?', a:'Collection framework is a framework that provides a set of classes and interfaces for storing and manipulating collections of objects.'},
 {q:'diff between list vs set vs queue?', a:'Lis  t is a collection that allows duplicate elements. Set is a collection that does not allow duplicate elements. Queue is a collection that allows duplicate elements.'},
 {q:'whats is arraylist?', a:'ArrayList is a collection that allows duplicate elements. It is achieved through arraylist.'},
 {q:'whats is a linkedlist?', a:'LinkedList is a collection that allows duplicate elements. It is achieved through linkedlist.'},
 {q:'whats is a hashset?', a:'HashSet is a collection that does not allow duplicate elements. It is achieved through hashset.'},
 {q:'whats is a treemap?', a:'TreeMap is a collection that does not allow duplicate elements. It is achieved through treemap.'},
 {q:'whats is a hashtable?', a:'Hashtable is a collection that does not allow duplicate elements. It is achieved through hashtable.'},
 {q:'whats is a treeSet?', a:'TreeSet is a collection that does not allow duplicate elements. It is achieved through treeSet.'},
 {q:'whats is map?', a:'Map is a collection that does not allow duplicate elements. It is achieved through map.'},
 {q:'whats is hashmap?', a:'HashMap is a collection that does not allow duplicate elements. It is achieved through hashmap.'},
{q:'what is stack?', a:'Stack is a collection that does not allow duplicate elements. It is achieved through stack.'},
{q:'what is queue?', a:'Queue is a collection that does not allow duplicate elements. It is achieved through queue.'},
{q:'what is deque?', a:'Deque is a collection that does not allow duplicate elements. It is achieved through deque.'},
{q:'what is priority queue?', a:'Priority queue is a collection that does not allow duplicate elements. It is achieved through priority queue.'},
 {q:'what is sortedset?', a:'SortedSet is a collection that does not allow duplicate elements. It is achieved through sortedset.'},
 {q:'genrics use in collection framework', a:'Genrics is a feature that allows a class to define the type of its data members. It is achieved through genrics.'},
{q:'what is java generics?', a:'Generics is a feature that allows a class to define the type of its data members. It is achieved through generics.'},
{q:'what is wrapper class?', a:'Wrapper class is a class that wraps a primitive data type and provides a way to convert it into an object.'},
{q:'whats is boxing vs unboxing?', a:'Boxing is the process of converting a primitive data type into a wrapper class. Unboxing is the process of converting a wrapper class into a primitive data type.'},
{q:'what is list iterator?', a:'List iterator is an iterator that allows a user to traverse the elements of a list in both directions. It is achieved through list iterator.'},
{q:'what is enumator?', a:'Enumator is an interface that allows a user to traverse the elements of a collection. It is achieved through enumator.'},
{q:'diff between iterator and enumator?', a:'Iterator is an interface that allows a user to traverse the elements of a collection. Enumator is an interface that allows a user to traverse the elements of a collection.'},
{q:'what is comrator?', a:'Comparator is an interface that allows a user to compare two objects. It is achieved through comparator.'},
{q:'what is comparable?', a:'Comparable is an interface that allows a user to compare two objects. It is achieved through comparable.'},
{q:'diff between comparable and comparator?', a:'Comparable is an interface that allows a user to compare two objects. Comparator is an interface that allows a user to compare two objects.'},
{q:'why we use comrator and comparable?', a:'Comparator and comparable are used to compare two objects. Comparator is used to compare two objects and comparable is used to compare two objects.'},
{q:'what is java stream?', a:'Stream is a collection of objects that supports functional-style operations. It is achieved through stream.'},
{q:'what is java stream api?', a:'Stream API is a set of classes and interfaces for processing collections of objects. It is achieved through stream api.'},
{q:'java 8 features?', a:'Java 8 features are lambda expressions, method references, default methods, and functional interfaces.'},
{q:'whats is functional interface?', a:'Functional interface is an interface that has only one abstract method. It is achieved through functional interface.'},
{q:'main method is overload or override?', a:'Main method is overload. It is achieved through main method.'},
{q:'diff between for and foreach loop', a:'For loop is a loop that is used to iterate over a collection. ForEach loop is a loop that is used to iterate over a collection. For loop is used to iterate over a collection and ForEach loop is used to iterate over a collection.'},
{q:'what is array?', a:'Array is a collection of objects that are stored in a contiguous memory location. It is achieved through array.'},
{q:'why we use collection framework?', a:'Collection framework is a framework that provides a set of classes and interfaces for storing and manipulating collections of objects. It is achieved through collection framework.'},
{q:'diff between array vs arraylist', a:'Array is a collection of objects that are stored in a contiguous memory location. ArrayList is a collection that allows duplicate elements. Array is a collection of objects that are stored in a contiguous memory location. ArrayList is a collection that allows duplicate elements.'},
{q:'abstract class is created object or not', a:'Abstract class is not created object. It is achieved through abstract class.'},
{ q: 'What is Java File Handling?', a: 'File handling in Java allows you to read from and write to files using classes from java.io and java.nio packages.' },
{ q: 'Which classes are used for File Handling in Java?', a: 'File, FileReader, FileWriter, BufferedReader, BufferedWriter, PrintWriter, Scanner, FileInputStream, FileOutputStream, ObjectInputStream, ObjectOutputStream.' },
{ q: 'How do you create a new file in Java?', a: 'Using File class: `File file = new File("filename.txt"); file.createNewFile();`' },
{ q: 'How to write data to a file in Java?', a: 'Using FileWriter or BufferedWriter: `FileWriter fw = new FileWriter("file.txt"); fw.write("text"); fw.close();`' },
{ q: 'How to read data from a file in Java?', a: 'Using FileReader, BufferedReader, or Scanner: `BufferedReader br = new BufferedReader(new FileReader("file.txt")); String line = br.readLine();`' },
    ]

  


}
